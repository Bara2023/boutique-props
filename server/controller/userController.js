/* eslint-disable no-unused-vars */
/* eslint-disable no-undef */
import expressAsyncHandler from 'express-async-handler';
import User from '../model/userModel.js';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';

// âœ… Enregistrement d'un utilisateur
export const registerUser = expressAsyncHandler(async (req, res) => {
  const { name, email, password } = req.body;

  console.log("ğŸ“© Tentative d'inscription :", email);

  const userExists = await User.findOne({ email });

  if (userExists) {
    console.log("ğŸš¨ Utilisateur dÃ©jÃ  existant :", email);
    return res.status(400).json({ message: 'Utilisateur dÃ©jÃ  existant, veuillez vous connecter' });
  }

  const salt = await bcrypt.genSalt(10);
  const hashedPassword = await bcrypt.hash(password, salt);

  const newUser = await User.create({
    name,
    email,
    password: hashedPassword,
  });

  if (newUser) {
    console.log("âœ… Utilisateur crÃ©Ã© :", newUser.email);
    res.status(201).json({
      _id: newUser._id,
      name: newUser.name,
      email: newUser.email,
      token: generateToken(newUser._id),
      message: 'Utilisateur crÃ©Ã© avec succÃ¨s !',
    });
  } else {
    res.status(500).json({ message: "Erreur lors de l'inscription" });
  }
});

// âœ… Connexion d'un utilisateur
export const loginUser = expressAsyncHandler(async (req, res) => {
  const { email, password } = req.body;

  console.log("ğŸ”‘ Tentative de connexion :", email);

  const user = await User.findOne({ email });

  if (user && (await bcrypt.compare(password, user.password))) {
    console.log("âœ… Connexion rÃ©ussie :", email);
    res.status(200).json({
      _id: user._id,
      name: user.name,
      email: user.email,
      token: generateToken(user._id),
      message: 'Utilisateur connectÃ© avec succÃ¨s !',
    });
  } else {
    console.log("Connexion Ã©chouÃ©e :", email);
    res.status(400).json({ message: "Email ou mot de passe incorrect" });
  }
});

// GÃ©nÃ©ration du token JWT
export const generateToken = (id) => {
  return jwt.sign({ id }, process.env.JWT_SECRET, {
    expiresIn: "30d",
  });
};

// RÃ©cupÃ©ration de l'utilisateur courant (nÃ©cessite `protect`)
export const getCurrentUser = expressAsyncHandler(async (req, res) => {
  if (!req.user) {
    return res.status(401).json({ message: "Utilisateur non trouvÃ©" });
  }

  console.log("ğŸ†” Utilisateur actuel :", req.user.email);

  res.status(200).json({
    id: req.user._id,
    name: req.user.name,
    email: req.user.email,
  });
});
